= simple_form_for @config, url: config_index_path, method: :post do |f|
  = f.input :city_id, label: 'City ID', hint: 'City ID on Gamma', required: true
  = f.input :location_id, label: 'Location ID', as: :integer, required: true,
          placeholder: "Can be any unique positive integer, as long as it's unique among all the locations", hint: 'check existing location ids in https://wiki.grab.com/display/GEO/Orbital+Queue+Config'
  = f.input :location_name, required: true, placeholder: 'e.g. KLIA', hint: 'Your custom location name, this will be used in message sent to dax, so be sure to use native language here'
  = f.input :location_url, placeholder: 'e.g. http://bit.ly/dmkqueue', hint: 'You can put a URL here and reference it in your message content'
  = f.input :message_config_id, required: true, placeholder: 'e.g. malay', hint: 'Check https://wiki.grab.com/display/GEO/Orbital+Queue+Config for message config id.'
  = f.input :vehicle_type_names, label: 'Vehicle type and names', required: true,
          input_html: { value: display_value_for(:vehicle_type_names) },
          placeholder: 'e.g. "302": "JustGrab - Airport", "400": "Taxi - Airport"',
          hint: 'Comma separated pairs with taxi type ID and taxi type name. The name will be used in the notifications.'
  = f.input :pickup_area_geo, required: true,
          input_html: { value: display_value_for(:pickup_area_geo) },
          hint: 'Comma separated geohash strings, recommended to be geohash level 6 or level 7',
          placeholder: 'e.g. w22r96, w22r97'
  = f.input :bay_area_geo, required: true,
          input_html: {value: display_value_for(:bay_area_geo) },
          hint: 'Comma separated geohash strings, recommended to be geohash level 6 or level 7',
          placeholder: 'e.g. w22r61, w22r63'
  = f.input :whitelist_enabled, placeholder: 'false', hint: 'If you set this field to true, you must set orbitalDaxWhitelist variable in ExP'
  = f.input :pax_cancel_no_priority_enabled, placeholder: 'false', hint: 'By default, after pax cancelled a booking, the driver will be put into a priority queue. With this option enabled, drivers will be put to the original position of the queue instead.'

  .badge.badge-light Notification Frequency
  br
  br

  = f.input :queue_position_multiple,
          placeholder: 'Leave blank to use the default value: 5',
          hint: 'We will send a notification to driver after he has moved X positions in the queue. You may consider increasing this value for large queues.'

  = f.input :queue_position_dynamic_multiple,
          input_html: { value: display_value_for(:queue_position_dynamic_multiple) },
          placeholder: "e.g. \"200\": 50, \"500\": 100\n(Leave blank to disable the feature, recommend to set this for very large queues).",
          hint: "(Optional) Comma separated pairs with the value of queue position and the key of the length of the range.\
          This defines the frequency of the notifications based on current queue position of drivers. e.g. \"500\": 100 means when the\
          queue position of driver is greater than 500, we will send a update message to the driver when his queue position number has change\
          by 100."

  = f.input :ignore_quota,
          placeholder: 'Leave blank to use the default value: 2',
          hint: 'Number of ignores by driver to move driver back to the end of queue position, if you make it 1, it means dax is not able to ignore at all. So for example, if you want dax be able to ignore 2 times, you need to set ignore quota 3.'
  = f.input :cancel_quota,
          placeholder: 'Leave blank to use the default value: 0',
          hint: 'Number of cancels by driver to move driver back to the end of queue position, if you make it 1, it means dax is not able to cancel at all. So for example, if you want dax be able to cancel 2 times, you need to set cancel quota 3.'
  = f.input :mercy_period_in_sec,
          placeholder: 'Leave blank to use the default value: 300',
          hint: 'Number of seconds after the driver turn off app or moved out of the bay area to be moved to the end of queue position'
  = f.input :pax_cancel_record_ttl_in_sec,
          placeholder: 'Leave blank to use the default value: 900',
          hint: 'Number of seconds for dax to come back to bay area after pax cancels'
  = f.input :remind_snooze_time_in_sec,
          placeholder: 'Leave blank to use the default value: 60',
          hint: 'If value is 180, when driver turn off app or moved out of bay area, driver will get the "Out Of Queue Remind Message" every 3 mins after receiving the first "Out of Queue Remind Message"'
  = f.input :remind_before_in_sec,
          placeholder: 'Leave blank to use the default value: 180',
          hint: 'The time we send the 1st "Out of Queue Remind Message". If value is 300, we will send this 5 mins before "mercy period in sec" ends.'

  .badge.badge-light Short-Distance Job settings
  br
  br
  .text In order to let the last job to be considered as short distance job for a dax when dax goes into queue, that job should meet some requirements:
  .text 1) Job must be accepted & completed, and dax must go back to queue in Z seconds, defined by "short distance job record ttl in sec" field.
  .text 2) Job has a trip distance (pickup->dropoff) which less than threshold distance kms which defined by "short distance job distance".
  br
  br
  = f.input :short_distance_job_record_ttl_in_sec, placeholder: '0', hint: 'dax must return queue after he accepted last short job in this time value'
  = f.input :short_distance_job_distance, placeholder: '0 meter', hint: 'if last job in queue has a short distance(less than this value unit is meter), dax will be directly put to the priority queue'

  = f.hidden_field :uid

  = f.button :submit, 'Generate', class: 'btn-success'

